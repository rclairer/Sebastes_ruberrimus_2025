# Executive Summary{-}

<!-- 
Note r4ss::table_exec_summary() will create the required tables. 
It currently makes them as csv files. 
sa4ss::es_table_tex will convert them to text files formatted as LaTeX tables if you prefer.
-->

Checking to see if this works \gls{s-tri}

<!-- Load tables produced from r4ss::table_all() -->

```{r}
#| echo: false
#| warning: false
#| message: false
library(flextable)
library(gt)
library(r4ss)
library(here)

replist <- r4ss::SS_output(here::here("model", "2025_base_model"))

tables <-r4ss::table_all(replist, dir = here::here("report"))

if (file.exists(here::here("report/tables"))) {
  all_files <- list.files(here::here("report/tables"), full.names = TRUE)
  all_rda_files <- all_files[grep(".rda", all_files)]
  for (a in 1:length(all_rda_files)) {
    load(all_rda_files[a])
  }
    # process all executive summary tables
  catches_es_table <- catches_es$table
  catches_es_cap <- catches_es$cap
  rm(catches_es)
  
  ssb_es_table <- ssb_es$table
  ssb_es_cap <- ssb_es$cap
  ssb_es_cap <- gsub("fraction unfished", "fraction of unfished spawning output", ssb_es_cap)
  rm(ssb_es)
  
  spr_es_table <- spr_es$table
  spr_es_cap <- spr_es$cap
  rm(spr_es)
  
  recr_es_table <- recr_es$table
  recr_es_cap <- recr_es$cap
  rm(recr_es)
  
  reference_points_table <- reference_points$table
  reference_points_cap <- reference_points$cap
  rm(reference_points)
  
  recent_management_table <- recent_management$table
  recent_management_cap <- recent_management$cap
  rm(recent_management)
    
  projections_table <- projections$table
  projections_cap <- projections$cap
  projections_cap <- gsub("fraction unfished", "fraction of unfished spawning output", projections_cap)
  rm(projections)
  
  compweight_table <- table_compweight$table
  compweight_cap <- table_compweight$cap
  rm(table_compweight)
  
  config_table <- table_config$table
  config_cap <- table_config$cap
  rm(table_config)
  
  parcount_table <- table_parcounts$table
  parcount_cap <- table_parcounts$cap
  rm(table_parcounts)
  
  pars_table <- table_pars$table
  pars_cap <- table_pars$cap
  rm(table_pars)

  # table from r4ss::table_exec_summary()
  time_series_table <- time_series$table
  time_series_cap <- time_series$cap
  rm(time_series)

  time_series_table <- time_series_table |>
    dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(
      grepl("Spawning", dplyr::cur_column()) ~ round(.x, 2),
      grepl("Total", dplyr::cur_column()) ~ round(.x, 0),
      grepl("Fraction", dplyr::cur_column()) ~ round(.x, 3),
      grepl("Recruits", dplyr::cur_column()) ~ round(.x, 0),
      grepl("Mortality", dplyr::cur_column()) ~ round(.x, 0),
      TRUE ~ round(.x, 3)
    )))

  # table from r4ss::table_ts() (not used currently)
  ts_table <- table_ts$table
  ts_cap <- table_ts$cap
  rm(table_ts)

  eval_tables <- TRUE
} else {
  eval_tables <- FALSE
}

# GMT016 table is downloaded from https://reports.psmfc.org/
# This will need to be fixed once Ian gets back, I think r4ss is getting confused because we have some catch 
# reported in MT and some in numbers of fish
GMT016 <- read.csv(here::here("report", "tables", "GMT016-final specifications-.csv"))
es_10_years <- recent_management_table$Year
recent_management_table[, "OFL (mt)"] <- GMT016 |>
  dplyr::filter(SPECIFICATION_TYPE == "OFL", YEAR %in% es_10_years) |>
  dplyr::arrange(YEAR) |>
  dplyr::select(VAL)

recent_management_table[, "ABC (mt)"] <- GMT016 |>
  dplyr::filter(SPECIFICATION_TYPE == "ABC", YEAR %in% es_10_years) |>
  dplyr::arrange(YEAR) |>
  dplyr::select(VAL)
recent_management_table[, "ACL (mt)"] <- GMT016 |>
  dplyr::filter(SPECIFICATION_TYPE == "ACL", YEAR %in% es_10_years) |>
  dplyr::arrange(YEAR) |>
  dplyr::select(VAL)
recent_management_table <- round(recent_management_table)
  
projections_table[1:2, "Adopted OFL (mt)"] <- GMT016 |>
  dplyr::filter(SPECIFICATION_TYPE == "OFL", YEAR %in% projections_table$Year) |>
  dplyr::arrange(YEAR) |>
  dplyr::select(VAL)
projections_table[1:2, "Adopted ACL (mt)"] <- GMT016 |>
  dplyr::filter(SPECIFICATION_TYPE == "ACL", YEAR %in% projections_table$Year) |>
  dplyr::arrange(YEAR) |>
  dplyr::select(VAL)
  
# yelloweye_management <- read.csv(here::here("report", "tables", "yelloweye_management.csv"))
```


```{r}
#| echo: false
#| eval: false

decision_table_cap <- "TODO: UPDATE PLACEHOLDER DECISION TABLE CAPTION COPIED FROM PETRALE SOLE. Decision table with 10-year projections. 'Mgmt' refers to the three management scenarios (A) the default harvest control rule $P^* = 0.45$, (B) harvest control rule with a lower $P^* = 0.40$. In each case the 2023 and 2024 catches are fixed at the ACLs which have been set for that year with estimated fleet allocation provided  by the GMT. The alternative states of nature ('Low', 'Base', and 'High' as discussed in the text) are provided in the columns, with Spawning Output ('Spawn', in trillions of eggs) and Fraction of unfished spawning output ('Frac') provided for each state."

# # replace mod_out below with calls like
# mod_low_A <- SS_output(dir_low_A,
#     verbose = FALSE,
#     printstats = FALSE,
#     SpawnOutputLabel = "Spawning Output (trillions of eggs)"
# )

mod_low_A <- mod_out
mod_low_B <- mod_out
mod_low_C <- mod_out

mod_base_A <- mod_out
mod_base_B <- mod_out
mod_base_C <- mod_out

mod_high_A <- mod_out
mod_high_B <- mod_out
mod_high_C <- mod_out 

```


## Stock{-}

## Catches{-}

```{r, tbl-es-catches, results = "asis"}
#| label: tbl-es-catches
#| warning: false
#| echo: false
#| eval: !expr eval_tables 
#| tbl-cap: !expr if(eval_tables) catches_es_cap 
#| tbl-pos: H

catches_es_table |>
  gt::gt() |>
  gt::fmt_number(
    columns = 2:9, # depends on number of fleets with catch
    decimals = 2
  ) |>
  gt::tab_options(
    table.font.size = 12,
    # if want to not have tables the width of the page include the below option:
    latex.use_longtable = TRUE 
  ) |>
  gt::cols_align(
    align = "center"
  ) |>
  gt::as_latex()

```

## Data and Assessment{-}

## Stock biomass and dynamics{-}

```{r, tbl-es-sb, results = "asis"}
#| label: tbl-es-sb
#| warning: false
#| echo: false
#| eval: !expr eval_tables 
#| tbl-cap: !expr if(eval_tables) ssb_es_cap 
#| tbl-pos: H

ssb_es_table |>
  gt::gt() |>
  gt::fmt_number(
    columns = 2:4,
    decimals = 2
  ) |>
  gt::fmt_number(
    columns = 5:7,
    decimals = 3
  ) |>
  gt::tab_options(
    table.font.size = 12,
    latex.use_longtable = TRUE 
  ) |>
  gt::cols_align(
    align = "center"
  ) |>
  gt::cols_width(
    tidyselect::everything() ~ px(75)
  ) |>
  gt::as_latex()
```


## Recruitment{-}

```{r, tbl-es-recr, results = "asis"}
#| label: tbl-es-recr
#| warning: false
#| echo: false
#| eval: !expr eval_tables 
#| tbl-cap: !expr if(eval_tables) recr_es_cap 
#| tbl-pos: H

recr_es_table |>
  gt::gt() |>
  gt::fmt_number(
    columns = 2:4,
    decimals = 0
  ) |>
  gt::fmt_number(
    columns = 5:7,
    decimals = 3
  ) |>
  gt::tab_options(
    table.font.size = 12,
    latex.use_longtable = TRUE 
  ) |>
  gt::cols_align(
    align = "center"
  ) |>
  gt::cols_width(
    tidyselect::everything() ~ px(75)
  ) |>
  gt::as_latex()

```


## Exploitation status{-}

```{r, tbl-es-spr, results = "asis"}
#| label: tbl-es-spr
#| warning: false
#| echo: false
#| eval: !expr eval_tables 
#| tbl-cap: !expr if(eval_tables) spr_es_cap 
#| tbl-pos: H

spr_es_table |>
  gt::gt() |>
  gt::fmt_number(
    columns = 2:7,
    decimals = 3
  ) |>
  gt::tab_options(
    table.font.size = 12,
    latex.use_longtable = TRUE 
  ) |>
  gt::cols_align(
    align = "center"
  ) |>
  gt::cols_width(
    tidyselect::everything() ~ px(80)
  ) |>
  gt::as_latex()
```

## Ecosystem considerations{-}

## Reference points{-}

```{r, tbl-ref-points-es, results = "asis"}
#| label: tbl-ref-points-es
#| warning: false
#| echo: false
#| eval: !expr eval_tables 
#| tbl-cap: !expr if(eval_tables) reference_points_cap 
#| tbl-pos: H

reference_points_table |>
  gt::gt() |>
  gt::fmt_number(
    columns = 2:4,
    rows = c(2:4, 7, 10, 12, 15, 17, 20),
    decimals = 0
  ) |>
  gt::fmt_number(
    columns = 2:4,
    rows = 1,
    decimals = 1
  ) |>
  gt::fmt_number(
    columns = 2:4,
    rows = c(5, 8, 9, 13:14, 18:19),
    decimals = 3
  ) |>
  gt::tab_options(
    table.font.size = 12,
    latex.use_longtable = TRUE 
  ) |>  
  gt::tab_style(
    style = list(
      gt::cell_text(style = "italic")
    ),
    locations = gt::cells_body(
      columns = "Reference Point",
      rows = dplyr::starts_with("Reference")
    )
  ) |>
  gt::sub_missing(
    columns = tidyselect::everything(),
    missing_text = "---"
  ) |>
  gt::as_latex()

```

## Management performance{-}

```{r, tbl-es-management, results = "asis"}
#| label: tbl-es-management
#| warning: false
#| echo: false
#| eval: !expr eval_tables 
#| tbl-cap: "Recent trend in the overfishing limits (OFL), the acceptable biological catches (ABCs), the annual catch limits (ACLs), and the total dead catch (landings + discards) all in metric tons (mt)."
#| tbl-pos: H

# yelloweye_management |>
recent_management_table |>
  rename(`Total dead catch (mt)` = `Catch (mt)`) |>
  gt::gt() |>
  gt::tab_options(
    table.font.size = 12,
    latex.use_longtable = TRUE 
  ) |>
  gt::as_latex()

```

## Harvest projections{-}

::: {.landscape}

```{r, tbl-es-projections, results = "asis"}
#| label: tbl-es-projections
#| warning: false
#| echo: false
#| eval: !expr eval_tables 
#| tbl-cap: !expr if(eval_tables) projections_cap 
#| tbl-pos: H

projections_table |>
  gt::gt() |>
  gt::fmt_number(
    columns = c(2:5, 7:8),
    decimals = 0
  ) |>
  gt::fmt_number(
    columns = c(6, 9:10),
    decimals = 3
  ) |>
  gt::tab_options(
    table.font.size = 12,
    latex.use_longtable = TRUE 
  ) |>
  gt::sub_missing(
    columns = tidyselect::everything(),
    missing_text = "---"
  ) |>
  gt::cols_align(
    align = "center"
  ) |>
  gt::cols_width(
    everything() ~ px(75)
  ) |>
  gt::as_latex()

```

:::

## Decision table{-}

```{r, results = "asis"}
#| label: tbl-es-decision
#| warning: false
#| echo: false
#| eval: !expr eval_tables 
#| tbl-cap: !expr if(eval_tables) decision_table_cap 
#| tbl-pos: H
source(here::here("Rcode", "decision_table.R"))
table_decision(
  list(mod_low_A, mod_base_A, mod_high_A),
  list(mod_low_B, mod_base_B, mod_high_B),
  list(mod_low_C, mod_base_C, mod_high_C)
)

```

ADW - decision tables not needed until after review

## Scientific uncertainty{-}

## Research and data needs{-}

## Rebuilding projections{-}